generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id           String           @id @default(uuid())
  userId       String           @unique
  role         UserRole         @default(GUEST)
  name         String?
  domain       String?          @unique
  jobTitle     String?
  bio          String?
  about        String?
  imageUrl     String?
  resumeUrl    String?
  email        String
  workEmail    String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  socialLinks  UserSocialLink[]
  projects     Project[]
  certificates Certificate[]
}

model Certificate {
  id             String    @id @default(uuid())
  name           String
  description    String
  imageUrl       String
  certificateUrl String
  issuedBy       String
  issueDate      DateTime
  expirationDate DateTime?
  profileId      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  profile        Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model UserSocialLink {
  id        String   @id @default(uuid())
  url       String
  iconName  String
  iconType  String
  visible   Boolean? @default(true)
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Project {
  id                  String    @id @default(uuid())
  name                String?
  description         String?
  thumbnailUrl        String?
  projectUrl          String?
  githubUrl           String?
  featured            Boolean?  @default(false)
  company             String?
  category            String?
  visible             Boolean?  @default(true)
  content             String?
  startDate           DateTime?
  endDate             DateTime?
  isWorkExperience    Boolean?  @default(false)
  workExperienceTitle String?
  profileId           String
  tags                String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  profile             Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

enum UserRole {
  ADMIN
  MEMBER
  GUEST
}
