datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  MEMBER
  GUEST
}

// models
model Profile {
  id String @id @default(uuid())
  userId String @unique // from Clerk Authentication
  name String
  jobTitle String
  bio String @db.Text
  imageUrl String @db.Text
  resumeUrl String @db.Text
  email String @db.Text
  phone String @db.Text
  location String @db.Text
  workEmail String @db.Text // this is the email that is displayed on the contact form, it is not the same as the email used for authentication
  role UserRole @default(GUEST)

  // relationships
  socialLinks UserSocialLink[]
  projects Project[]
  workExperiences WorkExperience[]
  certificates Certificate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certificate {
  id String @id @default(uuid())
  name String
  description String
  imageUrl String @db.Text
  certificateUrl String @db.Text
  issuedBy String
  issueDate DateTime
  expirationDate DateTime? // this is optional because some certificates do not expire

  // relationships
  profileId String
  profile Profile@relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model SocialLink {
  id String @id @default(uuid())
  name String // name of social media
  icon String // name of font awesome icon, pass this as a prop to the icon component

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSocialLink{
  id String @id @default(uuid())
  url String @db.Text

  // relationships
  profileId String
  profile Profile@relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model Project{
  id String @id @default(uuid())
  name String
  description String
  imageUrl String @db.Text // thumbnail image
  projectUrl String? @db.Text
  githubUrl String? @db.Text
  featured Boolean @default(false)
  company String
  projectType String
  visible Boolean @default(true)
  markdown String @db.Text // this contains the blog post content including images
  startDate DateTime
  endDate DateTime

  // relationships
  profileId String  // [hidden] it is the foreign key that connects to the Profile model
  profile Profile@relation(fields: [profileId], references: [id], onDelete: Cascade) // explanation: https://www.prisma.io/docs/concepts/components/prisma-schema/relations#cascade

  tags ProjectTag[]  // this project can have many tags

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model ProjectTag{
  id String @id @default(uuid())
  name String @unique // e.g React, Node, etc

  // relationships
  projectId String
  project Project@relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  workExperienceId String
  workExperience WorkExperience@relation(fields: [workExperienceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([workExperienceId])
}

model WorkExperience{
  id String @id @default(uuid())
  name String
  description String
  imageUrl String @db.Text // thumbnail image
  projectUrl String? @db.Text
  githubUrl String? @db.Text
  featured Boolean @default(false)
  company String
  projectType String
  visible Boolean @default(true)
  markdown String @db.Text // this contains the blog post content including images
  startDate DateTime
  endDate DateTime

  // relationships
  profileId String  // [hidden] it is the foreign key that connects to the Profile model
  profile Profile@relation(fields: [profileId], references: [id], onDelete: Cascade) // explanation: https://www.prisma.io/docs/concepts/components/prisma-schema/relations#cascade

  tags ProjectTag[]  // this project can have many tags

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}